#include "ros/ros.h"
#include "std_msgs/String.h"
#include "std_msgs/Int32.h"
#include "play.h"
#include "beginner_tutorials/Num.h"
#include "time.h"
#include "stdio.h"

#define KEY_LEFT  1113937
#define KEY_UP    1113938
#define KEY_RIGHT 1113939
#define KEY_DOWN  1113940
#define KEY_ESC   1048603
#define KEY_SPACE 1048608
#define KEY_DEL 1114111
#define KEY_a 1048673
#define KEY_A 1179713
#define KEY_1 1048625

#define KEY_ENTER 1048586
#define MODIFIER_SHIFT (1 << 16)
#define MODIFIER_CTRL (1 << 18)
#define MODIFIER_ALT (1 << 19)

bool stopRobot = true;

coord3 robot;
coord2 ball;

/**
 * This tutorial demonstrates simple receipt of messages over the ROS system.
 */
void chatterCallback(const beginner_tutorials::Num::ConstPtr& msg)
{
	robot = (coord3){msg->x0, msg->y0, msg->w0};
	ball = (coord2){msg->xb, msg->yb};
	
	//printf("coords: [%f %f %f], [%f %f]\n", robot.x, robot.y, robot.w, ball.x, ball.y);
	
	if(stopRobot)
		return;
		
	skill_goToPoint(robot, ball);
	//skill_goToPoint((coord3){msg->x0, msg->y0, msg->w0}, P_GOAL); // (coord2){msg->xb, msg->yb}
}
void pressKey(int key)
{
	//if(key == KEY_a + ('r' - 'a'))
	switch(key)
	{
	case KEY_ESC:
		stopRobot = true;
		killMotors();
		break;
	case KEY_ENTER:
		stopRobot = false;
		break;		
	case KEY_SPACE:
      printf("read and write message\n");
      char command[2] = {128, 21};
      serial_sendMessage(command);
      
      sleep_ms(50);
      char result[50];
      serial_readMessage(result);
      printf("Received data: %s\n", result);
		break;
//   case KEY_a:
  //    printf("read message\n");
    //  serial_readMessage();
		//break;
	}
	/*if(key == (KEY_LEFT | MODIFIER_CTRL))
	{
		moveRobotWorldCoordinates(robot, (coord3){0, 0, 1});
		sleep_ms(250);
		killMotors();		
	}*/
	if((key & (~MODIFIER_CTRL)) >= KEY_LEFT && (key & (~MODIFIER_CTRL)) <= KEY_DOWN)
	{
		switch(key)
		{
		case KEY_LEFT:
			moveRobotWorldCoordinates(robot, (coord3){-10, 0, 0});
			break;
		case KEY_UP:
			moveRobotWorldCoordinates(robot, (coord3){0, 10, 0});
			break;
		case KEY_RIGHT:
			moveRobotWorldCoordinates(robot, (coord3){10, 0, 0});
			break;
		case KEY_DOWN:
			moveRobotWorldCoordinates(robot, (coord3){0, -10, 0});
			break;
		case KEY_LEFT | MODIFIER_CTRL:
			moveRobotWorldCoordinates(robot, (coord3){0, 0, .5});
			break;			
		case KEY_RIGHT | MODIFIER_CTRL:
			moveRobotWorldCoordinates(robot, (coord3){0, 0, -.5});
			break;			
		}
		sleep_ms(250);
		killMotors();
	}
//	printf("key press: %d\n", key);
}

void commandCallback(const std_msgs::Int32::ConstPtr& msg)
{
	pressKey(msg->data);
}

int main(int argc, char **argv)
{
	calcBodyFrameVectors();

	ros::init(argc, argv, "listener");
	
	ros::NodeHandle n;
	
	ros::Subscriber sub = n.subscribe("chatter", 10, chatterCallback);
	
	ros::Subscriber sub2 = n.subscribe("command", 10, commandCallback);

	ros::spin();
	
	printf("Exiting\n");
	
	killMotors();
	close(serial_fd);
	return 0;
}
